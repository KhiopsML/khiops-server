syntax="proto3";

package com.orange.khiops;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "com.orange.khiops;khiops";

// These annotations are used when generating the swagger file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://gitlab.tech.orange/khiops/docker-khiops";
    description: "Khiops docker container repository";
  }
  schemes: [ HTTPS, HTTP ];
};

service Khiops {
  rpc RunBatch(BatchRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/batch
      post: "/v1/batch"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Run a batch of commands"
      description: "Run a batch of Khiops commands."
    };
  }
}

message BatchRequest {
  enum Tool {
    KHIOPS = 0;
    KHIOPS_COCLUSTERING = 1;
  }
  Tool tool = 1;
  oneof param {
    string scenario = 2;
    string scenario_path = 3;
    bytes binary_scenario = 4;
  }
}

message BatchResponse {
  int32 status = 1;
  string output = 2;
  string error = 3;
}

// Manages long-running operations with an API service.
//
// When an API method normally takes long time to complete, it can be designed
// to return [Operation][google.longrunning.Operation] to the client, and the client can use this
// interface to receive the real response asynchronously by polling the
// operation resource, or pass the operation resource to another API (such as
// Google Cloud Pub/Sub API) to receive the response.  Any API service that
// returns long-running operations should implement the `Operations` interface
// so developers can have a consistent client experience.
service Operations {
  
  // Lists operations that match the specified filter in the request.
  rpc ListOperations(google.longrunning.ListOperationsRequest) returns (google.longrunning.ListOperationsResponse) {
    option (google.api.http) = {
      get: "/v1/operations"
    };
  }

  // Gets the latest state of a long-running operation.  Clients can use this
  // method to poll the operation result at intervals as recommended by the API
  // service.
  rpc GetOperation(google.longrunning.GetOperationRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      get: "/v1/operation/{name}"
    };
  }

  // Deletes a long-running operation. This method indicates that the client is
  // no longer interested in the operation result. It does not cancel the
  // operation.
  rpc DeleteOperation(google.longrunning.DeleteOperationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/operation/{name}:delete"
    };
  }

  // Starts asynchronous cancellation on a long-running operation.  The server
  // makes a best effort to cancel the operation, but success is not
  // guaranteed.
  rpc CancelOperation(google.longrunning.CancelOperationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/operation/{name}:cancel"
      body: "*"
    };
  }

  // Waits for the specified long-running operation until it is done or reaches
  // at most a specified timeout, returning the latest state.
  rpc WaitOperation(google.longrunning.WaitOperationRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      get: "/v1/operation/{name}:wait"
    };
  }
}
